
Parameters:
  GitOwner:
    Type: String
    Description: GitHub repository owner
  GitRepo:
    Type: String
    Description: GitHub repository name

Resources:

  AccountManagerBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: AccountManager-bucket

  AccountManagerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref AccountManagerBucket
        S3Key: AccountManager.zip
      Handler: AccountManager
      Runtime: dotnetcore6.0
      Timeout: 60
      MemorySize: 256
      Role: !GetAtt AccountManagerLambdaExecutionRole.Arn

  AccountManagerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: MyLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/lambda/AccountManager:*

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref PipelineArtifactsBucket
        Type: S3
      Name: MyCodePipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitOwner
                Repo: !Ref GitRepo
                Branch: master
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 2
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: Lambda
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                FunctionName: !Ref AccountManagerLambda
              RunOrder: 3

  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: AccountManager-pipeline-artifacts-bucket

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: AccountManager-CodeBuildProject
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                dotnet: 6.0
            build:
              commands:
                - dotnet build AccountManager.csproj
          artifacts:
            files:
              - AccountManager/bin/Debug/net6.0/AccountManager.zip

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${PipelineArtifactsBucket}/*'
                  - !Sub 'arn:aws:s3:::${PipelineArtifactsBucket}'
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource: !Ref CodeBuildProject
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: *


  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetBucketPolicy
                  - s3:PutBucketPolicy
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                  - s3:PutObjectAcl
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:ListFunctions
                  - lambda:GetFunctionConfiguration
                Resource: !Sub 'arn:aws:lambda:*:*:function:AccountManager'
